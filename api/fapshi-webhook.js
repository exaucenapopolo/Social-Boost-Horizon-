// api/fapshi-webhook.js

const admin = require('firebase-admin');
const crypto = require('crypto');

// Initialisation Firebase corrigÃ©e
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert({
      projectId: process.env.FIREBASE_PROJECT_ID,
      clientEmail: process.env.FIREBASE_CLIENT_EMAIL,
      // La clÃ© privÃ©e peut Ãªtre problematic si elle n'est pas sur une seule ligne ou encodÃ©e
      // Assure-toi que FIREBASE_PRIVATE_KEY est une chaÃ®ne de caractÃ¨res sur une seule ligne,
      // par exemple, en remplaÃ§ant les \n par de vrais retours Ã  la ligne ou en l'encodant
      // Si tu l'as configurÃ©e comme tu l'as montrÃ©e avec les `\n`, elle pourrait Ãªtre parsÃ©e
      // par Vercel et Firebase Admin. Si Ã§a Ã©choue, pense Ã  encoder/dÃ©coder en Base64.
      privateKey: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n') 
    }),
  });
}

// Syntaxe Vercel : export default function avec req et res
export default async function handler(req, res) {
  // VÃ©rification mÃ©thode HTTP
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method Not Allowed' });
  }

  // RÃ©cupÃ©ration du corps BRUT
  // Vercel fournit req.body dÃ©jÃ  parsÃ© si Content-Type est application/json.
  // Pour la signature HMAC, tu as besoin du corps RAW. Vercel le met dans req.rawBody.
  // Si req.rawBody n'est pas disponible (ancienne version de Vercel ou configuration),
  // tu devras peut-Ãªtre lire le stream, mais req.rawBody est la mÃ©thode recommandÃ©e.
  const rawBody = req.rawBody; // Vercel fournit le corps brut ici pour les webhooks

  if (!rawBody) {
      console.error('Webhook: Corps brut de la requÃªte manquant.');
      return res.status(400).json({ error: 'Corps de la requÃªte manquant' });
  }

  // VÃ©rification signature HMAC
  const signature = req.headers['x-fapshi-signature'];
  const secretKey = process.env.FAPSHI_SECRET_KEY;

  if (!secretKey) {
      console.error('CRITICAL: FAPSHI_SECRET_KEY manquant pour la vÃ©rification du webhook.');
      return res.status(500).json({ error: 'Configuration serveur incomplÃ¨te pour le webhook' });
  }

  const expectedSig = crypto
    .createHmac('sha256', secretKey)
    .update(rawBody)
    .digest('hex');

  console.log(`>>> Signature check:\nReceived: ${signature}\nExpected: ${expectedSig}`);

  if (signature !== expectedSig) {
    console.warn('Webhook: Signature invalide reÃ§ue.');
    return res.status(401).json({ error: 'Signature invalide' });
  }

  // Parsing du payload (maintenant depuis rawBody pour garantir la cohÃ©rence avec la signature)
  let payload;
  try {
    payload = JSON.parse(rawBody);
  } catch (err) {
    console.error('Webhook: Erreur parsing JSON du payload:', err);
    return res.status(400).json({ error: 'JSON invalide dans le payload' });
  }

  // VÃ©rification statut paiement
  if (payload.status !== 'paid') {
    console.log(`Webhook: Paiement non finalisÃ© ou statut inattendu: ${payload.status}`);
    return res.status(200).json({ message: 'Paiement non finalisÃ© ou statut inattendu' });
  }

  // Validation des donnÃ©es
  const uid = payload.metadata?.userId;
  const amount = payload.amount;
  if (!uid || !amount) {
    console.error('Webhook: DonnÃ©es essentielles manquantes (uid ou amount) dans le payload:', payload);
    return res.status(400).json({ error: 'DonnÃ©es (userId ou amount) manquantes dans le webhook' });
  }
  
  // Assurez-vous que l'amount est un nombre pour Ã©viter des concatÃ©nations inattendues
  const parsedAmount = parseFloat(amount);
  if (isNaN(parsedAmount)) {
      console.error('Webhook: Montant non numÃ©rique reÃ§u:', amount);
      return res.status(400).json({ error: 'Montant invalide reÃ§u' });
  }

  // Mise Ã  jour Firestore
  try {
    const db = admin.firestore();
    const userRef = db.collection('users').doc(uid);

    await db.runTransaction(async (tx) => {
      const doc = await tx.get(userRef);
      const currentBalance = doc.exists ? doc.data().balance || 0 : 0;
      // Ajoute le montant parsÃ©
      tx.set(userRef, { balance: currentBalance + parsedAmount }, { merge: true });
    });

    console.log(`Webhook: Solde de l'utilisateur ${uid} mis Ã  jour avec ${parsedAmount}. Nouveau solde: ${currentBalance + parsedAmount}`);
    return res.status(200).json({ success: true, message: 'Solde utilisateur mis Ã  jour' });

  } catch (err) {
    console.error("ðŸ”¥ ERREUR FIRESTORE LORS DU WEBHOOK:", err);
    return res.status(500).json({ error: 'Erreur base de donnÃ©es lors de la mise Ã  jour du solde' });
  }
}
